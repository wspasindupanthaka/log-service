/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pasindu.logservice.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LogAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7461664162507315265L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogsAvroModel\",\"namespace\":\"com.pasindu.logservice.model\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"className\",\"type\":[\"null\",\"string\"]},{\"name\":\"date\",\"type\":[\"null\",\"string\"]},{\"name\":\"message\",\"type\":[\"null\",\"string\"]},{\"name\":\"logLevel\",\"type\":[\"null\",\"string\"]},{\"name\":\"applicationName\",\"type\":[\"null\",\"string\"]},{\"name\":\"serviceName\",\"type\":[\"null\",\"string\"]},{\"name\":\"userName\",\"type\":[\"null\",\"string\"]},{\"name\":\"requestId\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogAvroModel> ENCODER =
      new BinaryMessageEncoder<LogAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogAvroModel> DECODER =
      new BinaryMessageDecoder<LogAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LogAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LogAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LogAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LogsAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LogsAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LogsAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LogAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence className;
   private java.lang.CharSequence date;
   private java.lang.CharSequence message;
   private java.lang.CharSequence logLevel;
   private java.lang.CharSequence applicationName;
   private java.lang.CharSequence serviceName;
   private java.lang.CharSequence userName;
   private java.lang.CharSequence requestId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param className The new value for className
   * @param date The new value for date
   * @param message The new value for message
   * @param logLevel The new value for logLevel
   * @param applicationName The new value for applicationName
   * @param serviceName The new value for serviceName
   * @param userName The new value for userName
   * @param requestId The new value for requestId
   */
  public LogAvroModel(java.lang.CharSequence id, java.lang.CharSequence className, java.lang.CharSequence date, java.lang.CharSequence message, java.lang.CharSequence logLevel, java.lang.CharSequence applicationName, java.lang.CharSequence serviceName, java.lang.CharSequence userName, java.lang.CharSequence requestId) {
    this.id = id;
    this.className = className;
    this.date = date;
    this.message = message;
    this.logLevel = logLevel;
    this.applicationName = applicationName;
    this.serviceName = serviceName;
    this.userName = userName;
    this.requestId = requestId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return className;
    case 2: return date;
    case 3: return message;
    case 4: return logLevel;
    case 5: return applicationName;
    case 6: return serviceName;
    case 7: return userName;
    case 8: return requestId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: className = (java.lang.CharSequence)value$; break;
    case 2: date = (java.lang.CharSequence)value$; break;
    case 3: message = (java.lang.CharSequence)value$; break;
    case 4: logLevel = (java.lang.CharSequence)value$; break;
    case 5: applicationName = (java.lang.CharSequence)value$; break;
    case 6: serviceName = (java.lang.CharSequence)value$; break;
    case 7: userName = (java.lang.CharSequence)value$; break;
    case 8: requestId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'className' field.
   * @return The value of the 'className' field.
   */
  public java.lang.CharSequence getClassName() {
    return className;
  }


  /**
   * Sets the value of the 'className' field.
   * @param value the value to set.
   */
  public void setClassName(java.lang.CharSequence value) {
    this.className = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'logLevel' field.
   * @return The value of the 'logLevel' field.
   */
  public java.lang.CharSequence getLogLevel() {
    return logLevel;
  }


  /**
   * Sets the value of the 'logLevel' field.
   * @param value the value to set.
   */
  public void setLogLevel(java.lang.CharSequence value) {
    this.logLevel = value;
  }

  /**
   * Gets the value of the 'applicationName' field.
   * @return The value of the 'applicationName' field.
   */
  public java.lang.CharSequence getApplicationName() {
    return applicationName;
  }


  /**
   * Sets the value of the 'applicationName' field.
   * @param value the value to set.
   */
  public void setApplicationName(java.lang.CharSequence value) {
    this.applicationName = value;
  }

  /**
   * Gets the value of the 'serviceName' field.
   * @return The value of the 'serviceName' field.
   */
  public java.lang.CharSequence getServiceName() {
    return serviceName;
  }


  /**
   * Sets the value of the 'serviceName' field.
   * @param value the value to set.
   */
  public void setServiceName(java.lang.CharSequence value) {
    this.serviceName = value;
  }

  /**
   * Gets the value of the 'userName' field.
   * @return The value of the 'userName' field.
   */
  public java.lang.CharSequence getUserName() {
    return userName;
  }


  /**
   * Sets the value of the 'userName' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.userName = value;
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return The value of the 'requestId' field.
   */
  public java.lang.CharSequence getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.CharSequence value) {
    this.requestId = value;
  }

  /**
   * Creates a new LogsAvroModel RecordBuilder.
   * @return A new LogsAvroModel RecordBuilder
   */
  public static LogAvroModel.Builder newBuilder() {
    return new LogAvroModel.Builder();
  }

  /**
   * Creates a new LogsAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogsAvroModel RecordBuilder
   */
  public static LogAvroModel.Builder newBuilder(LogAvroModel.Builder other) {
    if (other == null) {
      return new LogAvroModel.Builder();
    } else {
      return new LogAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new LogsAvroModel RecordBuilder by copying an existing LogsAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new LogsAvroModel RecordBuilder
   */
  public static LogAvroModel.Builder newBuilder(LogAvroModel other) {
    if (other == null) {
      return new LogAvroModel.Builder();
    } else {
      return new LogAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for LogsAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogAvroModel>
    implements org.apache.avro.data.RecordBuilder<LogAvroModel> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence className;
    private java.lang.CharSequence date;
    private java.lang.CharSequence message;
    private java.lang.CharSequence logLevel;
    private java.lang.CharSequence applicationName;
    private java.lang.CharSequence serviceName;
    private java.lang.CharSequence userName;
    private java.lang.CharSequence requestId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(LogAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.className)) {
        this.className = data().deepCopy(fields()[1].schema(), other.className);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.logLevel)) {
        this.logLevel = data().deepCopy(fields()[4].schema(), other.logLevel);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.applicationName)) {
        this.applicationName = data().deepCopy(fields()[5].schema(), other.applicationName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[6].schema(), other.serviceName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.userName)) {
        this.userName = data().deepCopy(fields()[7].schema(), other.userName);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.requestId)) {
        this.requestId = data().deepCopy(fields()[8].schema(), other.requestId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing LogsAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(LogAvroModel other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.className)) {
        this.className = data().deepCopy(fields()[1].schema(), other.className);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.logLevel)) {
        this.logLevel = data().deepCopy(fields()[4].schema(), other.logLevel);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.applicationName)) {
        this.applicationName = data().deepCopy(fields()[5].schema(), other.applicationName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[6].schema(), other.serviceName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.userName)) {
        this.userName = data().deepCopy(fields()[7].schema(), other.userName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.requestId)) {
        this.requestId = data().deepCopy(fields()[8].schema(), other.requestId);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public LogAvroModel.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'className' field.
      * @return The value.
      */
    public java.lang.CharSequence getClassName() {
      return className;
    }


    /**
      * Sets the value of the 'className' field.
      * @param value The value of 'className'.
      * @return This builder.
      */
    public LogAvroModel.Builder setClassName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.className = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'className' field has been set.
      * @return True if the 'className' field has been set, false otherwise.
      */
    public boolean hasClassName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'className' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearClassName() {
      className = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public LogAvroModel.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public LogAvroModel.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'logLevel' field.
      * @return The value.
      */
    public java.lang.CharSequence getLogLevel() {
      return logLevel;
    }


    /**
      * Sets the value of the 'logLevel' field.
      * @param value The value of 'logLevel'.
      * @return This builder.
      */
    public LogAvroModel.Builder setLogLevel(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.logLevel = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'logLevel' field has been set.
      * @return True if the 'logLevel' field has been set, false otherwise.
      */
    public boolean hasLogLevel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'logLevel' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearLogLevel() {
      logLevel = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'applicationName' field.
      * @return The value.
      */
    public java.lang.CharSequence getApplicationName() {
      return applicationName;
    }


    /**
      * Sets the value of the 'applicationName' field.
      * @param value The value of 'applicationName'.
      * @return This builder.
      */
    public LogAvroModel.Builder setApplicationName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.applicationName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'applicationName' field has been set.
      * @return True if the 'applicationName' field has been set, false otherwise.
      */
    public boolean hasApplicationName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'applicationName' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearApplicationName() {
      applicationName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceName() {
      return serviceName;
    }


    /**
      * Sets the value of the 'serviceName' field.
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public LogAvroModel.Builder setServiceName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.serviceName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'userName' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return userName;
    }


    /**
      * Sets the value of the 'userName' field.
      * @param value The value of 'userName'.
      * @return This builder.
      */
    public LogAvroModel.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.userName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'userName' field has been set.
      * @return True if the 'userName' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'userName' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearUserName() {
      userName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public LogAvroModel.Builder setRequestId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.requestId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'requestId' field.
      * @return This builder.
      */
    public LogAvroModel.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogAvroModel build() {
      try {
        LogAvroModel record = new LogAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.className = fieldSetFlags()[1] ? this.className : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.logLevel = fieldSetFlags()[4] ? this.logLevel : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.applicationName = fieldSetFlags()[5] ? this.applicationName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.serviceName = fieldSetFlags()[6] ? this.serviceName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.userName = fieldSetFlags()[7] ? this.userName : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.requestId = fieldSetFlags()[8] ? this.requestId : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<LogAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.className == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.className);
    }

    if (this.date == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.date);
    }

    if (this.message == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.message);
    }

    if (this.logLevel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.logLevel);
    }

    if (this.applicationName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.applicationName);
    }

    if (this.serviceName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.serviceName);
    }

    if (this.userName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userName);
    }

    if (this.requestId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.requestId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.className = null;
      } else {
        this.className = in.readString(this.className instanceof Utf8 ? (Utf8)this.className : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.date = null;
      } else {
        this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.message = null;
      } else {
        this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.logLevel = null;
      } else {
        this.logLevel = in.readString(this.logLevel instanceof Utf8 ? (Utf8)this.logLevel : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.applicationName = null;
      } else {
        this.applicationName = in.readString(this.applicationName instanceof Utf8 ? (Utf8)this.applicationName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.serviceName = null;
      } else {
        this.serviceName = in.readString(this.serviceName instanceof Utf8 ? (Utf8)this.serviceName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userName = null;
      } else {
        this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.requestId = null;
      } else {
        this.requestId = in.readString(this.requestId instanceof Utf8 ? (Utf8)this.requestId : null);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.className = null;
          } else {
            this.className = in.readString(this.className instanceof Utf8 ? (Utf8)this.className : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.date = null;
          } else {
            this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.message = null;
          } else {
            this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.logLevel = null;
          } else {
            this.logLevel = in.readString(this.logLevel instanceof Utf8 ? (Utf8)this.logLevel : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.applicationName = null;
          } else {
            this.applicationName = in.readString(this.applicationName instanceof Utf8 ? (Utf8)this.applicationName : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.serviceName = null;
          } else {
            this.serviceName = in.readString(this.serviceName instanceof Utf8 ? (Utf8)this.serviceName : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userName = null;
          } else {
            this.userName = in.readString(this.userName instanceof Utf8 ? (Utf8)this.userName : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.requestId = null;
          } else {
            this.requestId = in.readString(this.requestId instanceof Utf8 ? (Utf8)this.requestId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










